// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
using Microsoft.EntityFrameworkCore;
using Microsoft.Data.SqlClient;
using System;
using System.Collections.Generic;
using System.Data;
using System.Threading;
using System.Threading.Tasks;
using Database;

namespace Database
{
    public partial class DormitoriesContext
    {
        private DormitoriesContextProcedures _procedures;

        public DormitoriesContextProcedures Procedures
        {
            get
            {
                if (_procedures is null) _procedures = new DormitoriesContextProcedures(this);
                return _procedures;
            }
            set
            {
                _procedures = value;
            }
        }

        public DormitoriesContextProcedures GetProcedures()
        {
            return Procedures;
        }
    }

    public partial class DormitoriesContextProcedures
    {
        private readonly DormitoriesContext _context;

        public DormitoriesContextProcedures(DormitoriesContext context)
        {
            _context = context;
        }

        public virtual async Task<ВремяпроживанияResult[]> ВремяпроживанияAsync(int? studentID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "studentID",
                    Value = studentID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<ВремяпроживанияResult>("EXEC @returnValue = [dbo].[Время проживания] @studentID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<ДежурстваподатеResult[]> ДежурстваподатеAsync(DateTime? date, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "date",
                    Precision = 27,
                    Scale = 7,
                    Value = date ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime2,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<ДежурстваподатеResult>("EXEC @returnValue = [dbo].[Дежурства по дате] @date", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<КоличествостудентоввкомнатеResult[]> КоличествостудентоввкомнатеAsync(int? roomID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "roomID",
                    Value = roomID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<КоличествостудентоввкомнатеResult>("EXEC @returnValue = [dbo].[Количество студентов в комнате] @roomID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<ПосещениегостямиResult[]> ПосещениегостямиAsync(int? studentID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "studentID",
                    Value = studentID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<ПосещениегостямиResult>("EXEC @returnValue = [dbo].[Посещение гостями] @studentID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }
    }
}
