// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;
using System.Configuration;

#nullable disable

namespace Database
{
    public partial class DormitoriesContext : DbContext
    {
        public DormitoriesContext()
        {
        }

        public DormitoriesContext(DbContextOptions<DormitoriesContext> options)
            : base(options)
        {
        }

        public virtual DbSet<SwitchboardItems> SwitchboardItems { get; set; }
        public virtual DbSet<Гости> Гости { get; set; }
        public virtual DbSet<ГруппыПользователей> ГруппыПользователей { get; set; }
        public virtual DbSet<Дежурства> Дежурства { get; set; }
        public virtual DbSet<КоличествоМестНаЭтаже> КоличествоМестНаЭтаже { get; set; }
        public virtual DbSet<КоличествоСтудентовПоКомнатам> КоличествоСтудентовПоКомнатам { get; set; }
        public virtual DbSet<Комнаты> Комнаты { get; set; }
        public virtual DbSet<НеВыполнившиеДежурства> НеВыполнившиеДежурства { get; set; }
        public virtual DbSet<НеОплатившиеПроживания> НеОплатившиеПроживания { get; set; }
        public virtual DbSet<Проживания> Проживания { get; set; }
        public virtual DbSet<Студенты> Студенты { get; set; }
        public virtual DbSet<Этажи> Этажи { get; set; }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured)
            {
                optionsBuilder.UseSqlServer(ConfigurationManager.ConnectionStrings["Dormitories"].ConnectionString);
                optionsBuilder.UseLazyLoadingProxies();
            }
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.HasAnnotation("Relational:Collation", "Cyrillic_General_CI_AS");

            modelBuilder.Entity<SwitchboardItems>(entity =>
            {
                entity.HasKey(e => new { e.SwitchboardId, e.ItemNumber })
                    .HasName("Switchboard Items$PrimaryKey");

                entity.ToTable("Switchboard Items");

                entity.Property(e => e.SwitchboardId).HasColumnName("SwitchboardID");

                entity.Property(e => e.Argument).HasMaxLength(255);

                entity.Property(e => e.ItemText).HasMaxLength(255);
            });

            modelBuilder.Entity<Гости>(entity =>
            {
                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.ДатаПосещения)
                    .HasPrecision(0)
                    .HasColumnName("Дата посещения");

                entity.Property(e => e.Имя).HasMaxLength(15);

                entity.Property(e => e.ККому).HasColumnName("К Кому");

                entity.Property(e => e.Отчество).HasMaxLength(15);

                entity.Property(e => e.Телефон).HasMaxLength(255);

                entity.Property(e => e.Фамилия).HasMaxLength(15);

                entity.HasOne(d => d.Студенты)
                    .WithMany(p => p.Гости)
                    .HasForeignKey(d => d.ККому)
                    .HasConstraintName("Гости$СтудентыГости");
            });

            modelBuilder.Entity<ГруппыПользователей>(entity =>
            {
                entity.ToTable("Группы пользователей");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Group).HasMaxLength(255);

                entity.Property(e => e.Pass).HasMaxLength(255);
            });

            modelBuilder.Entity<Дежурства>(entity =>
            {
                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Выполнено).HasDefaultValueSql("((0))");

                entity.Property(e => e.Дата).HasPrecision(0);

                entity.Property(e => e.СтудентId).HasColumnName("Студент_ID");

                entity.HasOne(d => d.Студент)
                    .WithMany(p => p.Дежурства)
                    .HasForeignKey(d => d.СтудентId)
                    .HasConstraintName("Дежурства$СтудентыДежурства");
            });

            modelBuilder.Entity<КоличествоМестНаЭтаже>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Количество мест на этаже");

                entity.Property(e => e.КоличествоМест).HasColumnName("Количество мест");
            });

            modelBuilder.Entity<КоличествоСтудентовПоКомнатам>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Количество студентов по комнатам");

                entity.Property(e => e.CountСтудентId).HasColumnName("Count-Студент_ID");

                entity.Property(e => e.НомерКомнаты).HasColumnName("Номер комнаты");

                entity.Property(e => e.ЭтажId).HasColumnName("Этаж_ID");
            });

            modelBuilder.Entity<Комнаты>(entity =>
            {
                entity.HasKey(e => e.НомерКомнаты)
                    .HasName("Комнаты$PrimaryKey");

                entity.HasIndex(e => e.ЭтажId, "Комнаты$КомнатаЭтаж_ID");

                entity.Property(e => e.НомерКомнаты)
                    .ValueGeneratedNever()
                    .HasColumnName("Номер комнаты");

                entity.Property(e => e.КоличествоМест)
                    .HasColumnName("Количество мест")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ЭтажId).HasColumnName("Этаж_ID");

                entity.HasOne(d => d.Этаж)
                    .WithMany(p => p.Комнаты)
                    .HasForeignKey(d => d.ЭтажId)
                    .HasConstraintName("Комнаты$ЭтажКомната");
            });

            modelBuilder.Entity<НеВыполнившиеДежурства>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Не выполнившие дежурства");

                entity.Property(e => e.Дата).HasPrecision(0);

                entity.Property(e => e.Имя).HasMaxLength(20);

                entity.Property(e => e.НомерКомнаты).HasColumnName("Номер комнаты");

                entity.Property(e => e.Отчетство).HasMaxLength(20);

                entity.Property(e => e.Фамилия).HasMaxLength(20);

                entity.Property(e => e.Этаж).HasColumnName("Этаж_ID");
            });

            modelBuilder.Entity<НеОплатившиеПроживания>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Не оплатившие проживания");

                entity.Property(e => e.Выселение).HasPrecision(0);

                entity.Property(e => e.Заселение).HasPrecision(0);

                entity.Property(e => e.Имя).HasMaxLength(20);

                entity.Property(e => e.НомерКомнаты).HasColumnName("Номер комнаты");

                entity.Property(e => e.Отчетство).HasMaxLength(20);

                entity.Property(e => e.ПлатаЗаМесяц)
                    .HasColumnType("money")
                    .HasColumnName("Плата за месяц");

                entity.Property(e => e.СтудентId).HasColumnName("Студент_ID");

                entity.Property(e => e.Фамилия).HasMaxLength(20);
            });

            modelBuilder.Entity<Проживания>(entity =>
            {
                entity.HasKey(e => e.СтудентId)
                    .HasName("Проживания$PrimaryKey");

                entity.Property(e => e.СтудентId).HasColumnName("Студент_ID");

                entity.Property(e => e.Выселение).HasPrecision(0);

                entity.Property(e => e.Заселение).HasPrecision(0);

                entity.Property(e => e.КомнатаId).HasColumnName("Комната_ID");

                entity.Property(e => e.Оплачено).HasDefaultValueSql("((0))");

                entity.Property(e => e.ПлатаЗаМесяц)
                    .HasColumnType("money")
                    .HasColumnName("Плата за месяц")
                    .HasDefaultValueSql("((0))");

                entity.HasOne(d => d.Комнаты)
                    .WithMany(p => p.Проживания)
                    .HasForeignKey(d => d.КомнатаId)
                    .HasConstraintName("Проживания$КомнатыПроживания");
            });

            modelBuilder.Entity<Студенты>(entity =>
            {
                entity.HasKey(e => e.СтудентId)
                    .HasName("Студенты$PrimaryKey");

                entity.HasIndex(e => e.СтудентId, "Студенты$ПроживанияСтуденты")
                    .IsUnique();

                entity.Property(e => e.СтудентId)
                    .ValueGeneratedNever()
                    .HasColumnName("Студент_ID");

                entity.Property(e => e.Имя).HasMaxLength(20);

                entity.Property(e => e.Льготы).HasMaxLength(255);

                entity.Property(e => e.НомерГруппы)
                    .HasMaxLength(10)
                    .HasColumnName("Номер Группы");

                entity.Property(e => e.Отчетство).HasMaxLength(20);

                entity.Property(e => e.Паспорт).HasMaxLength(255);

                entity.Property(e => e.Телефон).HasMaxLength(255);

                entity.Property(e => e.Фамилия).HasMaxLength(20);

                entity.HasOne(d => d.Проживания)
                    .WithOne(p => p.Студенты)
                    .HasForeignKey<Студенты>(d => d.СтудентId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Студенты$ПроживанияСтуденты");
            });

            modelBuilder.Entity<Этажи>(entity =>
            {
                entity.HasKey(e => e.ЭтажId)
                    .HasName("Этажи$PrimaryKey");

                entity.Property(e => e.ЭтажId)
                    .ValueGeneratedNever()
                    .HasColumnName("Этаж_ID");

                entity.Property(e => e.НаличиеДуша)
                    .HasColumnName("Наличие душа")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.НаличиеКухни)
                    .HasColumnName("Наличие кухни")
                    .HasDefaultValueSql("((0))");
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}